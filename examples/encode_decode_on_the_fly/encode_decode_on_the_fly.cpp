// Copyright Steinwurf ApS 2014.
// Distributed under the "STEINWURF EVALUATION LICENSE 1.0".
// See accompanying file LICENSE.rst or
// http://www.steinwurf.com/licensing

/// @example encode_decode_on_the_fly.cpp
///
/// This example shows how to use a storage aware encoder which will
/// allow you to encode from a block before all symbols have been
/// specified. This can be useful in cases where the symbols that
/// should be encoded are produced on-the-fly. The decoder will also
/// allow you to detect whether the symbols have been partially decoded.

#include <cstdint>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <vector>
#include <algorithm>

#include <kodocpp/kodocpp.hpp>

int main(void)
{
    // Seed random number generator to produce different results every time
    srand(static_cast<uint32_t>(time(0)));

    // Set the number of symbols (i.e. the generation size in RLNC
    // terminology) and the size of a symbol in bytes
    uint32_t max_symbols = 10;
    uint32_t max_symbol_size = 100;

    // Initilization of encoder and decoder
    kodocpp::encoder_factory encoder_factory(
        kodocpp::codec::on_the_fly,
        kodocpp::field::binary8,
        max_symbols,
        max_symbol_size);

    kodocpp::encoder encoder = encoder_factory.build();

    kodocpp::decoder_factory decoder_factory(
        kodocpp::codec::on_the_fly,
        kodocpp::field::binary8,
        max_symbols,
        max_symbol_size);

    kodocpp::decoder decoder = decoder_factory.build();

    // Allocate some storage for a "payload" the payload is what we would
    // eventually send over a network
    std::vector<uint8_t> payload(encoder.payload_size());

    // Allocate some data to encode. In this case we make a buffer
    // with the same size as the encoder's block size (the max.
    // amount a single encoder can encode)
    std::vector<uint8_t> data_in(encoder.block_size());

    // Just for fun - fill the data with random data
    std::generate(data_in.begin(), data_in.end(), rand);

    // Set the storage for the decoder
    std::vector<uint8_t> data_out(decoder.block_size());
    decoder.set_mutable_symbols(data_out.data(), decoder.block_size());

    // Keeps track of which symbols have been decoded
    std::vector<bool> decoded(max_symbols, false);

    // We are starting the encoding / decoding looop without having
    // added any data to the encoder - we will add symbols on-the-fly
    while (!decoder.is_complete())
    {
        // Randomly choose to add a new symbol (with 50% porbability)
        // if the encoder rank is less than the maximum number of symbols
        if ((rand() % 2) && encoder.rank() < encoder.symbols())
        {
            // The rank of an encoder  indicates how many symbols have been
            // added, i.e. how many symbols are available for encoding
            uint32_t rank = encoder.rank();

            // Calculate the offset to the next symbol to insert
            uint8_t* symbol = data_in.data() + rank * encoder.symbol_size();
            encoder.set_const_symbol(rank, symbol, encoder.symbol_size());
        }

        uint32_t bytes_used = encoder.write_payload(payload.data());
        std::cout << "Payload generated by encoder, rank = " << encoder.rank()
                  << ", bytes used = " << bytes_used << std::endl;

        // Simulate a lossy channel where we are losing 50% of the packets
        if (rand() % 2)
        {
            std::cout << "Packet dropped" << std::endl;
            continue;
        }

        // Packet got through - pass that packet to the decoder
        decoder.read_payload(payload.data());

        // The rank of the decoder indicates how many symbols have been
        // decoded or partially decoded
        std::cout << "Payload processed by the decoder, current rank = "
                  << decoder.rank() << std::endl;

        // Check if the decoder is partially complete
        // The decoder has to support partial decoding tracker for
        // on-the-fly decoding
        if (decoder.has_partial_decoding_interface() &&
            decoder.is_partially_complete())
        {
            for (uint32_t i = 0; i < decoder.symbols(); ++i)
            {
                if (!decoder.is_symbol_uncoded(i))
                {
                    continue;
                }

                if (!decoded[i])
                {
                    // Update that this symbol has been decoded
                    std::cout << "Symbol " << i << " was decoded" << std::endl;
                    decoded[i] = true;

                    uint32_t offset = i * encoder.symbol_size();

                    // Verify the symbol against the original data
                    auto start = data_in.begin() + offset;
                    auto end = start + encoder.symbol_size();
                    if (std::equal(start, end, data_out.begin() + offset))
                    {
                        std::cout << "Symbol " << i << " decoded correctly."
                                  << std::endl;
                    }
                    else
                    {
                        std::cout << "SYMBOL " << i << "DECODING FAILED."
                                  << std::endl;
                    }
                }
            }
        }
    }

    // Check if we properly decoded the data
    if (std::equal(data_out.begin(), data_out.end(), data_in.begin()))
    {
        std::cout << "Data decoded correctly" << std::endl;
    }
    else
    {
        std::cout << "Unexpected failure to decode, "
                  << "please file a bug report :)" << std::endl;
    }

    return 0;
}
